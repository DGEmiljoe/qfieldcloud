# Generated by Django 3.2.15 on 2022-09-23 14:02

import uuid

import django.db.migrations.state
import django.db.models.deletion
import migrate_sql.operations
from django.conf import settings
from django.contrib.postgres.operations import BtreeGistExtension
from django.db import migrations, models
from django.db.models import Q
from django.utils import timezone


def populate_subscriptions_model(apps, schema_editor):
    UserAccount = apps.get_model("core", "UserAccount")
    Subscription = apps.get_model("subscription", "Subscription")

    for account in UserAccount.objects.all():
        Subscription.objects.create(
            account=account,
            plan_id=account.plan_id,
            storage_quantity=0,
            status="active_paid",
            created_by_id=account.user_id,
            active_since=timezone.now(),
            active_until=None,
        )


def populate_account_plan_field(apps, schema_editor):
    UserAccount = apps.get_model("core", "UserAccount")
    Subscription = apps.get_model("subscription", "Subscription")

    for subscription in Subscription.objects.filter(
        Q(active_until__gte=timezone.now()) | Q(active_until__isnull=True)
    ):
        UserAccount.objects.filter(user_id=subscription.account_id).update(
            plan_id=subscription.plan_id
        )


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0058_auto_20220914_2049"),
        ("subscription", "0004_auto_20220920_1732"),
    ]

    operations = [
        migrations.AlterField(
            model_name="extrapackage",
            name="start_date",
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="plan",
            name="is_trial",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="plan",
            name="max_trial_organizations",
            field=models.IntegerField(
                default=1,
                help_text="Maximum number of trial organizations that the user can create. Set -1 to allow unlimited trial organizations.",
            ),
        ),
        BtreeGistExtension(),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        db_index=True,
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="core.useraccount",
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="subscription.plan",
                    ),
                ),
                ("storage_quantity", models.PositiveIntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("inactive_draft", "Inactive Draft"),
                            ("inactive_draft_expired", "Inactive Draft Expired"),
                            ("inactive Requested_create", "Inactive_Requested Create"),
                            ("inactive_awaits_payment", "Inactive Awaits Payment"),
                            ("active_paid", "Active Paid"),
                            ("active_past_due", "Active Past Due"),
                            ("inactive_cancelled", "Inactive Cancelled"),
                        ],
                        default="inactive_draft",
                        max_length=100,
                    ),
                ),
                (
                    "active_since",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Active since"
                    ),
                ),
                (
                    "active_until",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Active until"
                    ),
                ),
                (
                    "requested_cancel_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Requested cancel at"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
            ],
        ),
        migrations.RunPython(populate_subscriptions_model, populate_account_plan_field),
        migrate_sql.operations.CreateSQL(
            name="subscription_subscription_prevent_overlaps_idx",
            sql="\n            ALTER TABLE subscription_subscription\n            ADD CONSTRAINT subscription_subscription_prevent_overlaps\n            EXCLUDE USING gist (\n                account_id WITH =,\n                tstzrange(active_since, active_until) WITH &&\n            )\n            WHERE (active_since IS NOT NULL)\n        ",
            reverse_sql="\n            ALTER TABLE subscription_subscription DROP CONSTRAINT subscription_subscription_prevent_overlaps\n        ",
        ),
    ]
